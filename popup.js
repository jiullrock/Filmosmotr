// –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –§–∏–ª—å–º–æ—Å–º–æ—Ç—Ä
class MovieManager {
    constructor() {
        this.movies = [];
        this.currentGenre = 'all';
        this.nextId = 1; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ ID
        this.genres = {
            'action': '–ë–æ–µ–≤–∏–∫',
            'adventure': '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', 
            'comedy': '–ö–æ–º–µ–¥–∏—è',
            'drama': '–î—Ä–∞–º–∞',
            'horror': '–£–∂–∞—Å—ã',
            'thriller': '–¢—Ä–∏–ª–ª–µ—Ä',
            'fantasy': '–§—ç–Ω—Ç–µ–∑–∏',
            'sci-fi': '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞',
            'romance': '–†–æ–º–∞–Ω—Ç–∏–∫–∞',
            'animation': '–ê–Ω–∏–º–∞—Ü–∏—è',
            'documentary': '–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π',
            'crime': '–ö—Ä–∏–º–∏–Ω–∞–ª'
        };
        this.movieTypes = {
            'movie': 'üé¨',
            'cartoon': 'üé®',
            'series': 'üì∫'
        };
        this.init();
    }

    async init() {
        await this.loadMovies();
        this.initializeNextId(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ ID
        await i18n.init(); // Initialize i18n system
        this.bindEvents();
        this.renderMovies();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫ ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID
    initializeNextId() {
        if (this.movies.length === 0) {
            this.nextId = 1;
        } else {
            const maxId = Math.max(...this.movies.map(movie => movie.id || 0));
            this.nextId = maxId + 1;
        }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
    generateUniqueId() {
        return this.nextId++;
    }

    bindEvents() {
        // –ö–Ω–æ–ø–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        document.getElementById('add-movie-btn').addEventListener('click', () => this.showAddForm());
        document.getElementById('export-btn').addEventListener('click', () => this.exportMovies());
        document.getElementById('import-btn').addEventListener('click', () => this.importMovies());
        document.getElementById('settings-btn').addEventListener('click', () => this.openSettings());

        // –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        document.getElementById('save-movie-btn').addEventListener('click', () => this.saveMovie());
        document.getElementById('cancel-add-btn').addEventListener('click', () => this.hideAddForm());

        // –í–∫–ª–∞–¥–∫–∏ –∂–∞–Ω—Ä–æ–≤ (–±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ drag-scroll)
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.stopPropagation();
                this.switchGenre(e.target.dataset.genre);
            });
        });

        // –ò–º–ø–æ—Ä—Ç —Ñ–∞–π–ª–∞
        document.getElementById('import-file').addEventListener('change', (e) => this.handleFileImport(e));
        
        // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
        document.getElementById('import-cancel-btn').addEventListener('click', () => this.hideImportModal());
        document.getElementById('import-selected-btn').addEventListener('click', () => this.importSelectedMovies());
        document.getElementById('import-replace-btn').addEventListener('click', () => this.importReplaceMovies());
        
        // Drag-—Å–∫—Ä–æ–ª–ª –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        this.initDragScroll();
    }

    showAddForm() {
        document.getElementById('add-movie-form').classList.remove('hidden');
        document.getElementById('movie-title').focus();
    }

    hideAddForm() {
        document.getElementById('add-movie-form').classList.add('hidden');
        this.clearForm();
    }

    clearForm() {
        document.getElementById('movie-title').value = '';
        document.getElementById('movie-type').value = '';
        document.getElementById('movie-genre').value = '';
    }

    async saveMovie() {
        const title = document.getElementById('movie-title').value.trim();
        const type = document.getElementById('movie-type').value;
        const genre = document.getElementById('movie-genre').value;

        if (!title || !type || !genre) {
            this.showToast(i18n.t('fillAllFields'), 'error');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (–±–µ–∑ —É—á–µ—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞)
        const existingMovie = this.movies.find(movie => 
            movie.title.toLowerCase() === title.toLowerCase()
        );
        
        if (existingMovie) {
            this.showToast(i18n.t('movieAlreadyExists'), 'error');
            return;
        }

        const movie = {
            id: this.generateUniqueId(),
            title,
            type,
            genre,
            watched: false,
            favorite: false,
            dateAdded: new Date().toISOString()
        };

        this.movies.push(movie);
        await this.saveMovies();
        this.renderMovies();
        this.hideAddForm();
        this.showToast(i18n.t('movieAdded'));
    }

    switchGenre(genre) {
        this.currentGenre = genre;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
        document.querySelector(`[data-genre="${genre}"]`).classList.add('active');
        
        this.renderMovies();
    }

    renderMovies() {
        const container = document.getElementById('movies-list');
        const filteredMovies = this.getFilteredMovies();

        if (filteredMovies.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <p data-i18n="emptyListTitle">${i18n.t('emptyListTitle')}</p>
                    <p data-i18n="emptyListSubtitle">${i18n.t('emptyListSubtitle')}</p>
                </div>
            `;
            return;
        }

        container.innerHTML = filteredMovies.map(movie => this.createMovieHTML(movie)).join('');
        
        // –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º —Ñ–∏–ª—å–º–æ–≤
        this.bindMovieEvents();
    }

    getFilteredMovies() {
        let filtered;
        if (this.currentGenre === 'all') {
            filtered = this.movies;
        } else if (this.currentGenre === 'favorites') {
            filtered = this.movies.filter(movie => movie.favorite);
        } else {
            filtered = this.movies.filter(movie => movie.genre === this.currentGenre);
        }
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ
        return filtered.sort((a, b) => {
            if (a.watched === b.watched) {
                // –ï—Å–ª–∏ –æ–±–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
                return new Date(a.dateAdded || 0) - new Date(b.dateAdded || 0);
            }
            // –ù–µ–ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ (false) –≤–ø–µ—Ä—ë–¥, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ (true) –≤ –∫–æ–Ω–µ—Ü
            return a.watched - b.watched;
        });
    }

    createMovieHTML(movie) {
        const genreName = this.getGenreName(movie.genre);
        
        return `
            <div class="movie-item ${movie.watched ? 'watched' : ''}" data-id="${movie.id}">
                <button class="watch-btn ${movie.watched ? 'watched' : ''}" title="${movie.watched ? i18n.t('markUnwatched') : i18n.t('markWatched')}">
                    ${movie.watched ? 'üëÅÔ∏è' : 'üî≤'}
                </button>
                <div class="movie-content">
                    <div class="movie-title">${this.escapeHtml(movie.title)}</div>
                    <div class="movie-info">
                        <span class="movie-type ${movie.type}">${this.getTypeLabel(movie.type)}</span>
                        <span class="genre">${genreName}</span>
                    </div>
                </div>
                <div class="movie-actions">
                    <button class="action-btn copy-btn" title="${i18n.t('copyTitle')}">üìã</button>
                    <button class="action-btn favorite-btn ${movie.favorite ? 'active' : ''}" title="${i18n.t('addToFavorites')}">‚≠ê</button>
                    <button class="action-btn delete-btn" title="${i18n.t('deleteMovie')}">üóëÔ∏è</button>
                </div>
            </div>
        `;
    }

    getGenreName(genre) {
        const genreKeys = {
            'action': 'genreAction',
            'comedy': 'genreComedy',
            'drama': 'genreDrama',
            'horror': 'genreHorror',
            'fantasy': 'genreFantasy',
            'sci-fi': 'genreSciFi',
            'romance': 'genreRomance',
            'thriller': 'genreThriller',
            'animation': 'genreAnimation',
            'documentary': 'genreDocumentary',
            'crime': 'genreCrime',
            'adventure': 'genreAdventure'
        };
        const key = genreKeys[genre];
        return key ? i18n.t(key) : genre;
    }

    getTypeLabel(type) {
        const typeKeys = {
            'movie': 'typeMovie',
            'cartoon': 'typeCartoon',
            'series': 'typeSeries'
        };
        const key = typeKeys[type];
        return key ? i18n.t(key) : type;
    }

    bindMovieEvents() {
        document.querySelectorAll('.movie-item').forEach(item => {
            const movieId = parseInt(item.dataset.id);
            const movie = this.movies.find(m => m.id === movieId);

            // –ö–ª–∏–∫ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É —Ñ–∏–ª—å–º–∞ - –ø–æ–∏—Å–∫ –≤ Yandex
            item.querySelector('.movie-content').addEventListener('click', () => {
                this.searchMovie(movie.title);
            });

            // –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (–≥–ª–∞–∑)
            const watchBtn = item.querySelector('.watch-btn');
            if (watchBtn) {
                watchBtn.addEventListener('click', (e) => {
                    e.stopPropagation();
                    e.preventDefault();
                    
                    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–ª–∏–∫–∏
                    if (watchBtn.disabled) return;
                    watchBtn.disabled = true;
                    
                    setTimeout(() => {
                        watchBtn.disabled = false;
                    }, 300);
                    
                    this.toggleWatched(movieId, !movie.watched);
                });
            }

            // –ö–Ω–æ–ø–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            item.querySelector('.copy-btn').addEventListener('click', () => {
                this.copyToClipboard(movie.title);
            });

            // –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
            item.querySelector('.favorite-btn').addEventListener('click', () => {
                this.toggleFavorite(movieId);
            });

            // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
            item.querySelector('.delete-btn').addEventListener('click', () => {
                this.deleteMovie(movieId);
            });
        });
    }

    openSettings() {
        window.location.href = 'settings.html';
    }

    async searchMovie(title) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const settings = await this.getSettings();
            
            // –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø–æ–∏—Å–∫–∞
            const searchUrl = this.getSearchUrl(title, settings);
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É
            chrome.tabs.create({ url: searchUrl });
        } catch (error) {
            console.error('Error opening search:', error);
            // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –ø–æ–∏—Å–∫—É
            const searchQuery = `—Å–º–æ—Ç—Ä–µ—Ç—å ${title} –æ–Ω–ª–∞–π–Ω`;
            const yandexUrl = `https://yandex.ru/search/?text=${encodeURIComponent(searchQuery)}`;
            chrome.tabs.create({ url: yandexUrl });
        }
    }

    async getSettings() {
        const defaultSettings = {
            language: 'ru',
            searchEngine: 'yandex',
            searchTemplate: '—Å–º–æ—Ç—Ä–µ—Ç—å *name* –æ–Ω–ª–∞–π–Ω'
        };

        try {
            const result = await chrome.storage.local.get(['settings']);
            return { ...defaultSettings, ...result.settings };
        } catch (error) {
            console.error('Error loading settings:', error);
            return defaultSettings;
        }
    }

    getSearchUrl(movieTitle, settings) {
        const searchEngines = {
            yandex: 'https://yandex.ru/search/?text=',
            google: 'https://www.google.com/search?q=',
            bing: 'https://www.bing.com/search?q=',
            duckduckgo: 'https://duckduckgo.com/?q='
        };

        const baseUrl = searchEngines[settings.searchEngine] || searchEngines.yandex;
        const query = settings.searchTemplate.replace('*name*', movieTitle);
        return baseUrl + encodeURIComponent(query);
    }

    async toggleWatched(movieId, watched) {
        const movie = this.movies.find(m => m.id === movieId);
        if (movie) {
            movie.watched = watched;
            await this.saveMovies();
            this.renderMovies();
        }
    }

    async toggleFavorite(movieId) {
        const movie = this.movies.find(m => m.id === movieId);
        if (movie) {
            movie.favorite = !movie.favorite;
            await this.saveMovies();
            this.renderMovies();
            this.showToast(movie.favorite ? i18n.t('addedToFavorites') : i18n.t('removedFromFavorites'));
        }
    }

    async deleteMovie(movieId) {
        this.movies = this.movies.filter(m => m.id !== movieId);
        await this.saveMovies();
        this.renderMovies();
        this.showToast(i18n.t('movieDeleted'));
    }

    async copyToClipboard(text) {
        try {
            await navigator.clipboard.writeText(text);
            this.showToast(i18n.t('copiedToClipboard'));
        } catch (err) {
            // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
            const textArea = document.createElement('textarea');
            textArea.value = text;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            this.showToast(i18n.t('copiedToClipboard'));
        }
    }

    exportMovies() {
        const dataStr = JSON.stringify(this.movies, null, 2);
        const dataBlob = new Blob([dataStr], { type: 'application/json' });
        
        const link = document.createElement('a');
        link.href = URL.createObjectURL(dataBlob);
        link.download = `filmosmotr_${new Date().toISOString().split('T')[0]}.json`;
        link.click();
        
        this.showToast(i18n.t('listExported'));
    }

    importMovies() {
        document.getElementById('import-file').click();
    }

    showImportModal(movies) {
        const modal = document.getElementById('import-modal');
        const importList = document.getElementById('import-list');
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫
        importList.innerHTML = '';
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∏–ª—å–º—ã, –∫–æ—Ç–æ—Ä—ã—Ö –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ
        const existingTitles = new Set(this.movies.map(m => m.title.toLowerCase()));
        const newMovies = movies.filter(movie => 
            !existingTitles.has(movie.title.toLowerCase())
        );
        
        if (newMovies.length === 0) {
            importList.innerHTML = `<div class="import-item"><span>${i18n.t('allSelectedMoviesExist')}</span></div>`;
            // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ" –µ—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤
            document.getElementById('import-selected-btn').style.display = 'none';
        } else {
            document.getElementById('import-selected-btn').style.display = 'inline-flex';
            
            newMovies.forEach(movie => {
                const item = document.createElement('div');
                item.className = 'import-item';
                item.innerHTML = `
                    <input type="checkbox" class="import-checkbox" data-movie-id="${movie.id}" checked>
                    <div>
                        <div class="movie-title">${this.escapeHtml(movie.title)}</div>
                        <div class="movie-info">
                            <span class="movie-type ${movie.type}">${this.movieTypes[movie.type]} ${this.getTypeLabel(movie.type)}</span>
                            <span class="genre">${this.getGenreName(movie.genre)}</span>
                        </div>
                    </div>
                `;
                importList.appendChild(item);
            });
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
        this.pendingImportMovies = movies;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        modal.classList.remove('hidden');
    }

    hideImportModal() {
        document.getElementById('import-modal').classList.add('hidden');
        this.pendingImportMovies = null;
    }

    async importSelectedMovies() {
        if (!this.pendingImportMovies) return;
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã
        const selectedCheckboxes = document.querySelectorAll('.import-checkbox:checked');
        const selectedIds = Array.from(selectedCheckboxes).map(cb => parseInt(cb.dataset.movieId));
        
        if (selectedIds.length === 0) {
            this.showToast(i18n.t('selectMoviesForImport'), 'error');
            return;
        }
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã
        const moviesToImport = this.pendingImportMovies.filter(movie => 
            selectedIds.includes(movie.id)
        );
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –µ—â–µ —Ä–∞–∑
        const existingTitles = new Set(this.movies.map(m => m.title.toLowerCase()));
        const uniqueMovies = moviesToImport.filter(movie => 
            !existingTitles.has(movie.title.toLowerCase())
        );
        
        if (uniqueMovies.length === 0) {
            this.showToast(i18n.t('allSelectedMoviesExist'), 'error');
            return;
        }
        
        // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
        uniqueMovies.forEach(movie => {
            movie.id = this.generateUniqueId();
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å–º—ã
        this.movies.push(...uniqueMovies);
        await this.saveMovies();
        this.renderMovies();
        
        this.hideImportModal();
        this.showToast(i18n.t('moviesImported', { count: uniqueMovies.length }));
    }

    async importReplaceMovies() {
        if (!this.pendingImportMovies) return;
        
        if (confirm(i18n.t('replaceListConfirm'))) {
            // –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∞–µ–º ID –¥–ª—è –≤—Å–µ—Ö –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤
            this.nextId = 1;
            this.pendingImportMovies.forEach(movie => {
                movie.id = this.generateUniqueId();
            });
            
            this.movies = [...this.pendingImportMovies];
            await this.saveMovies();
            this.renderMovies();
            
            this.hideImportModal();
            this.showToast(i18n.t('listReplaced', { count: this.pendingImportMovies.length }));
        }
    }

    async handleFileImport(event) {
        const file = event.target.files[0];
        if (!file) return;

        try {
            const text = await file.text();
            const importedMovies = JSON.parse(text);
            
            if (!Array.isArray(importedMovies)) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
            }

            // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            const validMovies = importedMovies.filter(movie => 
                movie.title && movie.type && movie.genre && typeof movie.id === 'number'
            );

            if (validMovies.length === 0) {
                throw new Error('–í —Ñ–∞–π–ª–µ –Ω–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–æ–≤
            this.showImportModal(validMovies);

        } catch (error) {
            console.error('Import error:', error);
            this.showToast(i18n.t('importError'), 'error');
        }

        // –û—á–∏—Å—Ç–∫–∞ input
        event.target.value = '';
    }

    async loadMovies() {
        try {
            const result = await chrome.storage.local.get(['movies']);
            this.movies = result.movies || [];
        } catch (error) {
            console.error('Error loading movies:', error);
            this.movies = [];
        }
    }

    async saveMovies() {
        try {
            await chrome.storage.local.set({ movies: this.movies });
        } catch (error) {
            console.error('Error saving movies:', error);
            this.showToast(i18n.t('saveError'), 'error');
        }
    }

    showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.textContent = message;
        document.body.appendChild(toast);

        // –ü–æ–∫–∞–∑–∞—Ç—å toast
        setTimeout(() => toast.classList.add('show'), 100);

        // –°–∫—Ä—ã—Ç—å toast —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
            toast.classList.remove('show');
            setTimeout(() => document.body.removeChild(toast), 300);
        }, 3000);
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    initDragScroll() {
        const tabsContainer = document.querySelector('.tabs');
        let isDown = false;
        let startX;
        let scrollLeft;
        let hasMoved = false;
        let clickedElement = null;

        tabsContainer.addEventListener('mousedown', (e) => {
            isDown = true;
            hasMoved = false;
            clickedElement = e.target;
            tabsContainer.classList.add('dragging');
            startX = e.pageX - tabsContainer.getBoundingClientRect().left;
            scrollLeft = tabsContainer.scrollLeft;
            e.preventDefault();
        });

        document.addEventListener('mouseleave', () => {
            if (isDown) {
                isDown = false;
                hasMoved = false;
                tabsContainer.classList.remove('dragging');
            }
        });

        document.addEventListener('mouseup', (e) => {
            if (isDown) {
                isDown = false;
                tabsContainer.classList.remove('dragging');
                
                // –ï—Å–ª–∏ –Ω–µ –¥–≤–∏–≥–∞–ª–∏—Å—å –∏ –∫–ª–∏–∫–Ω—É–ª–∏ –ø–æ –∫–Ω–æ–ø–∫–µ - –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–ª–∏–∫
                if (!hasMoved && clickedElement && clickedElement.classList.contains('tab-btn')) {
                    clickedElement.click();
                }
                hasMoved = false;
            }
        });

        tabsContainer.addEventListener('mousemove', (e) => {
            if (!isDown) return;
            e.preventDefault();
            
            const x = e.pageX - tabsContainer.getBoundingClientRect().left;
            const diffX = Math.abs(x - startX);
            
            // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –¥–≤–∏–≥–∞–ª–∏—Å—å, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–∏ –±–æ–ª—å—à–µ 5 –ø–∏–∫—Å–µ–ª–µ–π
            if (diffX > 5) {
                hasMoved = true;
            }
            
            if (hasMoved) {
                const walk = (x - startX) * 1.5;
                tabsContainer.scrollLeft = scrollLeft - walk;
            }
        });

        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–∞—á-—Å–∫—Ä–æ–ª–ª–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        let startTouchX;
        let touchScrollLeft;
        let touchHasMoved = false;
        let touchClickedElement = null;

        tabsContainer.addEventListener('touchstart', (e) => {
            touchHasMoved = false;
            touchClickedElement = e.target;
            startTouchX = e.touches[0].pageX - tabsContainer.getBoundingClientRect().left;
            touchScrollLeft = tabsContainer.scrollLeft;
            e.preventDefault();
        });

        tabsContainer.addEventListener('touchmove', (e) => {
            if (!startTouchX) return;
            e.preventDefault();
            
            const x = e.touches[0].pageX - tabsContainer.getBoundingClientRect().left;
            const diffX = Math.abs(x - startTouchX);
            
            if (diffX > 5) {
                touchHasMoved = true;
            }
            
            if (touchHasMoved) {
                const walk = (x - startTouchX) * 1.5;
                tabsContainer.scrollLeft = touchScrollLeft - walk;
            }
        });

        tabsContainer.addEventListener('touchend', (e) => {
            if (!touchHasMoved && touchClickedElement && touchClickedElement.classList.contains('tab-btn')) {
                touchClickedElement.click();
            }
            startTouchX = null;
            touchHasMoved = false;
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    new MovieManager();
});