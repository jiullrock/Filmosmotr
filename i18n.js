class I18n {
    constructor() {
        this.currentLanguage = 'ru';
        this.translations = {
            ru: {
                // Header
                appTitle: 'üé¨ –§–∏–ª—å–º–æ—Å–º–æ—Ç—Ä',
                addButton: '‚ûï –î–æ–±–∞–≤–∏—Ç—å',
                importButton: 'üìÅ –ò–º–ø–æ—Ä—Ç',
                exportButton: 'üíæ –≠–∫—Å–ø–æ—Ä—Ç',
                donateButton: 'üíù –î–æ–Ω–∞—Ç',
                settingsButton: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                
                // Add form
                addMovieTitle: '–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º',
                movieTitlePlaceholder: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞',
                selectType: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø',
                selectGenre: '–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä',
                typeMovie: 'üé¨ –§–∏–ª—å–º',
                typeCartoon: 'üé® –ú—É–ª—å—Ç—Ñ–∏–ª—å–º',
                typeSeries: 'üì∫ –°–µ—Ä–∏–∞–ª',
                cancelButton: '–û—Ç–º–µ–Ω–∞',
                saveButton: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                
                // Genres
                genreAll: '–í—Å–µ',
                genreFavorites: '‚≠ê',
                genreAction: '–ë–æ–µ–≤–∏–∫',
                genreComedy: '–ö–æ–º–µ–¥–∏—è',
                genreDrama: '–î—Ä–∞–º–∞',
                genreHorror: '–£–∂–∞—Å—ã',
                genreFantasy: '–§—ç–Ω—Ç–µ–∑–∏',
                genreSciFi: '–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞',
                genreRomance: '–†–æ–º–∞–Ω—Ç–∏–∫–∞',
                genreThriller: '–¢—Ä–∏–ª–ª–µ—Ä',
                genreAnimation: '–ê–Ω–∏–º–∞—Ü–∏—è',
                genreDocumentary: '–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π',
                genreCrime: '–ö—Ä–∏–º–∏–Ω–∞–ª',
                genreAdventure: '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è',
                
                // Movie actions
                markWatched: '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π',
                markUnwatched: '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –Ω–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–π',
                copyTitle: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ',
                addToFavorites: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ',
                deleteMovie: '–£–¥–∞–ª–∏—Ç—å',
                
                // Empty state
                emptyListTitle: 'üìΩÔ∏è –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø—É—Å—Ç',
                emptyListSubtitle: '–î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ñ–∏–ª—å–º!',
                
                // Import modal
                importModalTitle: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞',
                addSelectedButton: '–î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ',
                replaceAllButton: '–ó–∞–º–µ–Ω–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é',
                
                // Settings page
                settingsTitle: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                backButton: '‚Üê –ù–∞–∑–∞–¥',
                languageLabel: '–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞',
                languageDescription: '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è',
                searchEngineLabel: '–ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞',
                searchEngineDescription: '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤',
                searchTemplateLabel: '–®–∞–±–ª–æ–Ω –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞',
                searchTemplateDescription: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —à–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ *name* –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞',
                searchTemplatePlaceholder: '—Å–º–æ—Ç—Ä–µ—Ç—å *name* –æ–Ω–ª–∞–π–Ω',
                saveSettingsButton: 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
                resetSettingsButton: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
                
                // Toast messages
                movieAdded: '–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω!',
                movieDeleted: '–§–∏–ª—å–º —É–¥–∞–ª–µ–Ω!',
                addedToFavorites: '–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!',
                removedFromFavorites: '–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!',
                copiedToClipboard: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!',
                fillAllFields: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!',
                movieAlreadyExists: '–§–∏–ª—å–º —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!',
                settingsSaved: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!',
                settingsReset: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã!',
                templateMustContainName: '–®–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å *name*!',
                selectMoviesForImport: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º—ã –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞!',
                allSelectedMoviesExist: '–í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ!',
                moviesImported: '–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {count} —Ñ–∏–ª—å–º–æ–≤!',
                listReplaced: '–°–ø–∏—Å–æ–∫ –∑–∞–º–µ–Ω–µ–Ω! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {count} —Ñ–∏–ª—å–º–æ–≤.',
                listExported: '–°–ø–∏—Å–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω!',
                importError: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞!',
                saveError: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!',
                
                // Search engines
                searchEngineYandex: 'üü° Yandex',
                searchEngineGoogle: 'üîç Google',
                searchEngineBing: 'üî∑ Bing',
                searchEngineDuckDuckGo: 'ü¶Ü DuckDuckGo',
                
                // Languages
                languageRussian: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
                languageEnglish: 'üá∫üá∏ English',
                
                // Template preview
                templatePreviewExample: '–ü—Ä–∏–º–µ—Ä: {example}',
                templatePreviewError: '–û—à–∏–±–∫–∞: —à–∞–±–ª–æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å *name*',
                
                // Confirmation
                resetSettingsConfirm: '–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?',
                replaceListConfirm: '–ó–∞–º–µ–Ω–∏—Ç—å –≤–µ—Å—å —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –Ω–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–π? –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω.',
                
                // Donation page
                donatePageTitle: 'üíù –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞',
                donatePageSubtitle: '–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –§–∏–ª—å–º–æ—Å–º–æ—Ç—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É!',
                cryptoWalletsTitle: '–ö—Ä–∏–ø—Ç–æ–∫–æ—à–µ–ª—å–∫–∏',
                evmLabel: 'EVM (–≠—Ç–µ—Ä–∏—É–º, BSC, Polygon)',
                solLabel: 'Solana (SOL)',
                copyAddress: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å',
                addressCopied: '–ê–¥—Ä–µ—Å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!',
                thankYou: '–°–ø–∞—Å–∏–±–æ!',
            },
            en: {
                // Header
                appTitle: 'üé¨ Filmosmotr',
                addButton: '‚ûï Add',
                importButton: 'üìÅ Import',
                exportButton: 'üíæ Export',
                donateButton: 'üíù Donate',
                settingsButton: '‚öôÔ∏è Settings',
                
                // Add form
                addMovieTitle: 'Add Movie',
                movieTitlePlaceholder: 'Movie title',
                selectType: 'Select type',
                selectGenre: 'Select genre',
                typeMovie: 'üé¨ Movie',
                typeCartoon: 'üé® Cartoon',
                typeSeries: 'üì∫ Series',
                cancelButton: 'Cancel',
                saveButton: 'Save',
                
                // Genres
                genreAll: 'All',
                genreFavorites: '‚≠ê',
                genreAction: 'Action',
                genreComedy: 'Comedy',
                genreDrama: 'Drama',
                genreHorror: 'Horror',
                genreFantasy: 'Fantasy',
                genreSciFi: 'Sci-Fi',
                genreRomance: 'Romance',
                genreThriller: 'Thriller',
                genreAnimation: 'Animation',
                genreDocumentary: 'Documentary',
                genreCrime: 'Crime',
                genreAdventure: 'Adventure',
                
                // Movie actions
                markWatched: 'Mark as watched',
                markUnwatched: 'Mark as unwatched',
                copyTitle: 'Copy title',
                addToFavorites: 'Favorites',
                deleteMovie: 'Delete',
                
                // Empty state
                emptyListTitle: 'üìΩÔ∏è Movie list is empty',
                emptyListSubtitle: 'Add your first movie!',
                
                // Import modal
                importModalTitle: 'Select movies to import',
                addSelectedButton: 'Add selected',
                replaceAllButton: 'Replace all',
                
                // Settings page
                settingsTitle: '‚öôÔ∏è Settings',
                backButton: '‚Üê Back',
                languageLabel: 'Interface language',
                languageDescription: 'Select language for the extension interface',
                searchEngineLabel: 'Search engine',
                searchEngineDescription: 'Select search engine for movie searches',
                searchTemplateLabel: 'Search query template',
                searchTemplateDescription: 'Customize search template. Use *name* for movie title',
                searchTemplatePlaceholder: 'watch *name* online',
                saveSettingsButton: 'üíæ Save settings',
                resetSettingsButton: 'üîÑ Reset to defaults',
                
                // Toast messages
                movieAdded: 'Movie added!',
                movieDeleted: 'Movie deleted!',
                addedToFavorites: 'Added to favorites!',
                removedFromFavorites: 'Removed from favorites!',
                copiedToClipboard: 'Copied to clipboard!',
                fillAllFields: 'Fill all fields!',
                movieAlreadyExists: 'Movie with this title already exists!',
                settingsSaved: 'Settings saved!',
                settingsReset: 'Settings reset!',
                templateMustContainName: 'Template must contain *name*!',
                selectMoviesForImport: 'Select movies to import!',
                allSelectedMoviesExist: 'All selected movies already exist!',
                moviesImported: 'Imported {count} movies!',
                listReplaced: 'List replaced! Loaded {count} movies.',
                listExported: 'List exported!',
                importError: 'Error importing file!',
                saveError: 'Error saving!',
                
                // Search engines
                searchEngineYandex: 'üü° Yandex',
                searchEngineGoogle: 'üîç Google',
                searchEngineBing: 'üî∑ Bing',
                searchEngineDuckDuckGo: 'ü¶Ü DuckDuckGo',
                
                // Languages
                languageRussian: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π',
                languageEnglish: 'üá∫üá∏ English',
                
                // Template preview
                templatePreviewExample: 'Example: {example}',
                templatePreviewError: 'Error: template must contain *name*',
                
                // Confirmation
                resetSettingsConfirm: 'Reset all settings to defaults?',
                replaceListConfirm: 'Replace entire movie list with imported one? Current list will be deleted.',
                
                // Donation page
                donatePageTitle: 'üíù Support the Project',
                donatePageSubtitle: 'If you like Filmosmotr, you can support the development!',
                cryptoWalletsTitle: 'Crypto Wallets',
                evmLabel: 'EVM (Ethereum, BSC, Polygon)',
                solLabel: 'Solana (SOL)',
                copyAddress: 'Copy address',
                addressCopied: 'Address copied!',
                thankYou: 'Thank you!',
            }
        };
    }

    setLanguage(lang) {
        if (this.translations[lang]) {
            this.currentLanguage = lang;
        }
    }

    t(key, params = {}) {
        let text = this.translations[this.currentLanguage][key] || this.translations['ru'][key] || key;
        
        // Replace parameters in text
        for (const [param, value] of Object.entries(params)) {
            text = text.replace(`{${param}}`, value);
        }
        
        return text;
    }

    // Update all translatable elements in the DOM
    updateDOM() {
        // Update elements with data-i18n attribute
        document.querySelectorAll('[data-i18n]').forEach(element => {
            const key = element.getAttribute('data-i18n');
            if (element.tagName === 'INPUT' && (element.type === 'text' || element.type === 'search')) {
                element.placeholder = this.t(key);
            } else {
                element.textContent = this.t(key);
            }
        });

        // Update elements with data-i18n-title attribute (tooltips)
        document.querySelectorAll('[data-i18n-title]').forEach(element => {
            const key = element.getAttribute('data-i18n-title');
            element.title = this.t(key);
        });

        // Update page title
        const titleElement = document.querySelector('title');
        if (titleElement && titleElement.hasAttribute('data-i18n')) {
            titleElement.textContent = this.t(titleElement.getAttribute('data-i18n'));
        }
    }

    // Initialize i18n system
    async init() {
        try {
            // Load language from settings
            const result = await chrome.storage.local.get(['settings']);
            const settings = result.settings || {};
            this.setLanguage(settings.language || 'ru');
        } catch (error) {
            // Fallback to localStorage for testing
            try {
                const stored = localStorage.getItem('filmosmotr_settings');
                if (stored) {
                    const settings = JSON.parse(stored);
                    this.setLanguage(settings.language || 'ru');
                }
            } catch (e) {
                console.error('Error loading language settings:', e);
                this.setLanguage('ru');
            }
        }
        
        this.updateDOM();
    }
}

// Create global i18n instance
const i18n = new I18n();
